#!/bin/bash

# Resources
# http://users.skynet.be/pascalbotte/art/server-cert.htm: ca serial and pks store

cd `dirname "${BASH_SOURCE}"`

cacert(){
  if [ -f "ca.key.pem" ]; then  echo ''; echo '!!! cacert files already exists !!!'; echo ''; help; exit 1; fi
  # RSA Private key (create "ca.key.pem")
  openssl genrsa -out ca.key.pem 2048
  # Self-signed (with the key previously generated) root CA certificate (create "ca.cert.pem")
  # "/C=FR/ST=IDF/L=Paris/O=Adaltas/CN=adaltas.com/emailAddress=david@adaltas.com"
  openssl req -x509 -new -sha256 \
    -config ca.cnf \
    -subj "/C=FR/O=ADALTAS/L=Paris/CN=adaltas.cloud" \
    -key ca.key.pem -days 7300 \
    -out ca.cert.pem
}

cacert_check(){
  shortname=`echo $1 | sed 's/\([[:alnum:]]\)\..*/\1/'`
  openssl verify -CAfile ca.cert.pem ${shortname}.cert.pem
}

# The first time you use your CA to sign a certificate you can use the -CAcreateserial
# option. This option will create a file (ca.srl) containing a serial number. You are
# probably going to create more certificate, and the next time you will have to do that
# use the -CAserial option (and no more -CAcreateserial) followed with the name of the
# file containing your serial number.
cert(){
  if [ -z "$1" ]; then help; exit 1; fi
  fqdn=$1
  domain=`openssl x509 -noout -subject -in ca.cert.pem | sed -n '/^subject/s/^.*CN=//p'`
  shortname=${fqdn%".$domain"}
  if [ ! -f ca.key.pem ]; then echo 'Run `./generate.sh cacert` first.'; exit 1; fi
  # Certificate signing request (CSR) and private key (create "hadoop.cert.csr" and "hadoop.key.pem")
  # "/C=FR/ST=IDF/L=Paris/O=Adaltas/CN=${fqdn}/emailAddress=david@adaltas.com"
  openssl req -newkey rsa:2048 -sha256 -nodes -out ${shortname}.cert.csr -keyout ${shortname}.key.pem -subj "/C=FR/O=ADALTAS.CLOUD/L=Paris/CN=${fqdn}"
  # to view the CSR: `openssl req -in toto.cert.csr -noout -text`
  # Sign the CSR (create "hadoop.cert.pem")
  openssl x509 -req -sha256 -days 7300 -in ${shortname}.cert.csr -CA ca.cert.pem -CAkey ca.key.pem -out ${shortname}.cert.pem -CAcreateserial -CAserial ca.seq
  # Clean up
  echo ${shortname}.cert.csr
  rm -rf ${shortname}.cert.csr
}

cacert_view(){
  openssl x509 -noout -text -fingerprint \
    -in ca.cert.pem
}

cert_view(){
  fqdn=$1
  #domain=`openssl x509 -noout -subject -in ca.cert.pem | sed -n '/^subject/s/^.*CN=//p'`
  #shortname=${fqdn%".$domain"}
  shortname=`echo $1 | sed 's/\([[:alnum:]]\)\..*/\1/'`
  openssl x509 -text -fingerprint \
    -in ${shortname}.cert.pem
}

csr_sign(){
  fqdn=$1
  domain=`openssl x509 -noout -subject -in ca.cert.pem | sed -n '/^subject/s/^.*CN=//p'`
  shortname=${fqdn%".$domain"}
  # Sign the CSR (create "${shortname}.cert.pem")
  openssl x509 -req -sha256 -days 7300 \
    -CA ca.cert.pem -CAkey ca.key.pem \
    -CAcreateserial -CAserial ca.seq \
    -extfile sign.cnf \
    -in ${shortname}.csr \
    -out ${shortname}.cert.pem
}

csr_view(){
  fqdn=$1
  domain=`openssl x509 -noout -subject -in ca.cert.pem | sed -n '/^subject/s/^.*CN=//p'`
  shortname=${fqdn%".$domain"}
  openssl req -noout -text \
    -in ${shortname}.csr
}

help(){
  echo './generate (cacert|cert)'
  echo 'Examples:'
  echo '  ./generate cacert'
  echo '  ./generate cacert_view'
  echo '  ./generate cacert_check ${fqdn}'
  echo '  ./generate cert ${fqdn}'
  echo '  ./generate cert_view ${fqdn}'
  echo '  ./generate csr_sign ${fqdn}'
  echo '  ./generate csr_view ${fqdn}'
}

case "$1" in
  cacert) cacert
    ;;
  cacert_view) cacert_view
    ;;
  cacert_check) cacert_check $2
    ;;
  cert) cert $2
    ;;
  cert_view) cert_view $2
    ;;
  csr_sign) csr_sign $2
    ;;
  csr_view) csr_view $2
    ;;
  *) help
    ;;
esac
